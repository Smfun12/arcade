/*
 * File: Breakout.java
 * -------------------
 * Name:
 * Section Leader:
 *
 * This file will eventually implement the game of Breakout.
 */

import acm.graphics.*;
import acm.program.*;
import acm.util.RandomGenerator;
import acm.util.*;

import java.applet.*;
import java.awt.*;
import java.awt.event.*;

public class ballAndPaddle extends GraphicsProgram {
    // Hello
    /** Width and height of application window in pixels */
    public static final int APPLICATION_WIDTH = 400;
    public static final int APPLICATION_HEIGHT = 600;

    /** Dimensions of game board (usually the same) */
    private static final int WIDTH = APPLICATION_WIDTH;
    private static final int HEIGHT = APPLICATION_HEIGHT;

    /** Dimensions of the paddle */
    private static final int PADDLE_WIDTH = 60;
    private static final int PADDLE_HEIGHT = 10;

//    /** Offset of the paddle up from the bottom */
//    private static final int PADDLE_Y_OFFSET = 30;

    /** Number of bricks per row */
    private static final int NBRICKS_PER_ROW = 10;

    //    /** Number of rows of bricks */
    private static final int NBRICK_ROWS = 10;

    /** Separation between bricks */
    private static final int BRICK_SEP = 4;

    /** Width of a brick */
    private static final int BRICK_WIDTH = (WIDTH - (NBRICKS_PER_ROW - 1) * BRICK_SEP) / NBRICKS_PER_ROW;

    /** Height of a brick */
    private static final int BRICK_HEIGHT = 8;

    /** Radius of the ball in pixels */
    private static final int BALL_RADIUS = 10;
    private static final int PAUSE = 5;

    //    /** Offset of the top brick row from the top */
    private static final int BRICK_Y_OFFSET = 70;
    /** Number of turns */
    private static int time = 3;
    private static int NTURNS = 3;
    private int countBricks;
    private double vx, vy;
    private GRect rocket;
    private GOval ball;
    private static final int DELAY = 5000;

    /* Method: run() */
    /** Runs the Breakout program. */
    public void run() {
        this.setSize(APPLICATION_WIDTH + 100, APPLICATION_HEIGHT);
        beginning = new GLabel("Welcome to our Arcanoid game created");
        beginning.setFont("JetBrains Mono-26");
        beginning.setColor(Color.red);
        add(beginning, 0, 20);
        GLabel beginning3 = new GLabel("by DrImmiracle and Smfun12");
        beginning3.setFont("JetBrains Mono-26");
        beginning3.setColor(Color.red);
        add(beginning3, 0, 50);
        GLabel beginning1 = new GLabel("At the beginning you have total 3 lives.");
        beginning1.setFont("JetBrains Mono-26");
        beginning1.setColor(Color.red);
        add(beginning1, 0, 80);
        GLabel beginning4 = new GLabel("To launch the game press 'Play'");
        beginning4.setFont("JetBrains Mono-26");
        beginning4.setColor(Color.red);
        add(beginning4, 0, 110);
        addMouseListeners();
        GLabel label = new GLabel("We hope you'll enjoy this application.");
        label.setFont("JetBrains Mono-26");
        label.setColor(Color.red);
        add(label, 0, 140);
        GLabel beginning2 = new GLabel("To add the ball, just click. Good luck! ");
        beginning2.setFont("JetBrains Mono-26");
        beginning2.setColor(Color.RED);
        add(beginning2, 0, 170);
        while (menu) {
            GImage back = new GImage("back.png");
            back.scale(1, 1);
            add(back);
            beginning.sendToFront();
            label.sendToFront();
            beginning1.sendToFront();
            beginning2.sendToFront();
            beginning3.sendToFront();
            beginning4.sendToFront();
            playGame = new GRect(175, 100);
            playGame.setFilled(false);
            playGame.setColor(Color.red);
            add(playGame, getWidth() / 2.0 - 75, getHeight() / 2.0 - 75);
            start = new GLabel("Play");
            start.setFont("Calibri-36");
            start.setColor(Color.red);
            add(start, getWidth() / 2.0 - 20, getHeight() / 2.0 - 20);

        }
        setupTheGame();
        creatingPaddle();

        GLabel label1;
        GLabel label2;
        while (game) {
            if (ball != null) {
                ball.move(vx, vy);
            }
//            movePowerUp();
            checkCollision();
            hitTheBrick();
            hitTheRocket();
            checkTheRocket();
//        hitThePaddle();
            checkForWinner();
            label2 = new GLabel("Current life" + NTURNS);
            label2.setFont("Calibri-18");
            label2.setColor(Color.red);
            add(label2, 50, 50);

            label1 = new GLabel("Points: " + 3 * countBricks);
            label1.setFont("Calibri-18");
            label1.setColor(Color.red);
            add(label1, 250, 50);
            pause(PAUSE);
            remove(label1);
            remove(label2);
        }
        removeAll();


    }

    private void checkForWinner() {
        GLabel label2;
        if (countBricks == 100){

            game = false;
            GImage win = new GImage("win.gif");
            win.scale(0.5, 0.9);
            add(win);
            label2 = new GLabel("You win, total points: " + 300);
            label2.setFont("Calibri-20");
            label2.setColor(Color.blue);
            add(label2, getWidth() / 2.0 - 75, 50);
            pause(DELAY);
            removeAll();
            GImage image = new GImage("bluemoon.png");
            image.scale(0.3,0.6);
            add(image);
            while(time >0){
            beginning = new GLabel("Congratulation! Next level with ");
            beginning.setFont("JetBrains Mono-26");
            beginning.setColor(Color.red);
            add(beginning, getWidth()/2.0-175, getHeight()/2.0);
            label2 = new GLabel("extra ball speed in: "+  time);
            label2.setFont("JetBrains Mono-26");
            label2.setColor(Color.red);
            add(label2, getWidth() / 2.0 - 175, getHeight()/2.0+30);
            time-=1;
            pause(1000);
            remove(label2);
            }
            removeAll();
            this.setSize(APPLICATION_WIDTH+100,APPLICATION_HEIGHT);
            menu = true;
            menu();
            ball = null;
            time = 3;
            vy *= 1.1;
            vx *= 1.1;
            game = true;
            setupTheGame();
            creatingPaddle();

        }
        if (countBricks<300 && NTURNS == 0){

                GImage lose = new GImage("lose.gif");
                lose.scale(0.9, 2);
                add(lose);
                label2 = new GLabel("You lost, total points: " + 3 * countBricks);
                label2.setFont("Calibri-20");
                label2.setColor(Color.blue);
                add(label2, getWidth() / 2.0 - 75, 50);
                menu = true;
                pause(DELAY);
                this.setSize(APPLICATION_WIDTH+100,APPLICATION_HEIGHT);
            beginning = new GLabel("Welcome to our Arcanoid game created");
            beginning.setFont("JetBrains Mono-26");
            beginning.setColor(Color.red);
            add(beginning, 0, 20);
            GLabel beginning3 = new GLabel("by DrImmiracle and Smfun12.");
            beginning3.setFont("JetBrains Mono-26");
            beginning3.setColor(Color.red);
            add(beginning3, 0, 50);
            GLabel beginning1 = new GLabel("At the beginning you have total 3 lives.");
            beginning1.setFont("JetBrains Mono-26");
            beginning1.setColor(Color.red);
            add(beginning1, 0, 80);
            GLabel beginning4 = new GLabel("To launch the game press 'Play'");
            beginning4.setFont("JetBrains Mono-26");
            beginning4.setColor(Color.red);
            add(beginning4, 0, 110);
            addMouseListeners();
            GLabel label = new GLabel("We hope you'll enjoy this application.");
            label.setFont("JetBrains Mono-26");
            label.setColor(Color.red);
            add(label, 0, 140);
            GLabel beginning2 = new GLabel("To add the ball, just click. Good luck! ");
            beginning2.setFont("JetBrains Mono-26");
            beginning2.setColor(Color.RED);
            add(beginning2, 0, 170);
            while (menu) {
                GImage back = new GImage("back.png");
                back.scale(1, 1);
                add(back);
                beginning.sendToFront();
                label.sendToFront();
                beginning1.sendToFront();
                beginning2.sendToFront();
                beginning3.sendToFront();
                beginning4.sendToFront();
                playGame = new GRect(175, 100);
                playGame.setFilled(false);
                playGame.setColor(Color.red);
                add(playGame, getWidth() / 2.0 - 75, getHeight() / 2.0 - 75);
                start = new GLabel("Play");
                start.setFont("Calibri-36");
                start.setColor(Color.red);
                add(start, getWidth() / 2.0 - 20, getHeight() / 2.0 - 20);
            }
            removeAll();
            ball = null;
            setupTheGame();
            creatingPaddle();

        }
    }
    public void menu(){
        beginning = new GLabel("Welcome to our Arcanoid game created");
        beginning.setFont("JetBrains Mono-26");
        beginning.setColor(Color.red);
        add(beginning, 0, 20);
        GLabel beginning3 = new GLabel("by DrImmiracle and Smfun12.");
        beginning3.setFont("JetBrains Mono-26");
        beginning3.setColor(Color.red);
        add(beginning3, 0, 50);
        GLabel beginning1 = new GLabel("At the beginning you have total 3 lives.");
        beginning1.setFont("JetBrains Mono-26");
        beginning1.setColor(Color.red);
        add(beginning1, 0, 80);
        GLabel beginning4 = new GLabel("To launch the game press 'Play'");
        beginning4.setFont("JetBrains Mono-26");
        beginning4.setColor(Color.red);
        add(beginning4, 0, 110);
        addMouseListeners();
        GLabel label = new GLabel("We hope you'll enjoy this application.");
        label.setFont("JetBrains Mono-26");
        label.setColor(Color.red);
        add(label, 0, 140);
        GLabel beginning2 = new GLabel("To add the ball, just click. Good luck! ");
        beginning2.setFont("JetBrains Mono-26");
        beginning2.setColor(Color.RED);
        add(beginning2, 0, 170);
        while (menu) {
            GImage back = new GImage("back.png");
            back.scale(1, 1);
            add(back);
            beginning.sendToFront();
            label.sendToFront();
            beginning1.sendToFront();
            beginning2.sendToFront();
            beginning3.sendToFront();
            beginning4.sendToFront();
            playGame = new GRect(175, 100);
            playGame.setFilled(false);
            playGame.setColor(Color.red);
            add(playGame, getWidth() / 2.0 - 75, getHeight() / 2.0 - 75);
            start = new GLabel("Play");
            start.setFont("Calibri-36");
            start.setColor(Color.red);
            add(start, getWidth() / 2.0 - 20, getHeight() / 2.0 - 20);
        }
    }
    public void setupTheGame() {
        this.setSize(APPLICATION_WIDTH+15, APPLICATION_HEIGHT);
        GImage back = new GImage("back.png");
        back.scale(1, 1);
        add(back);
        rocket = new GRect(PADDLE_WIDTH, PADDLE_HEIGHT);
        rocket.setFilled(true);
        rocket.setColor(Color.blue);
        add(rocket, 160, 500);

//        ball = new GOval(BALL_RADIUS, BALL_RADIUS);
//        ball.setFilled(true);
//        ball.setColor(Color.black);
//        add(ball, getWidth() / 2.0, getHeight() / 2.0);
        vx = r_gen.nextDouble(1.0, 3.0);
        if (r_gen.nextBoolean(0.5)) vx = -vx;
        vy = 3;
    }

    private void checkCollision() {
        if (ball!=null){
        if (ball.getX() >= 0 && ball.getY() + BALL_RADIUS <= getHeight())
            vy *= -1;
        if (ball.getX() >= 0 && ball.getY() >= 0) {
            vx *= -1;
            vy *= -1;
        }
        if (ball.getX() + BALL_RADIUS <= getWidth() && ball.getY() > 0)
            vx *= -1;
        if (ball.getY()+BALL_RADIUS >rocket.getY()){
            remove(ball);
            ball = null;
//            add(ball,getWidth()/2.0, getHeight()/2.0);
            NTURNS -= 1;
            if (NTURNS==0){
                game = false;
            }
        }
        }
    }

    public void creatingPaddle() {
        countBricks = 0;
        int height = BRICK_Y_OFFSET;
        for (int i = 0; i < NBRICK_ROWS; i++) {
            height += BRICK_HEIGHT + BRICK_SEP;
            int width = 0;
            for (int j = 0; j < NBRICKS_PER_ROW; j++) {
                GRect brick = new GRect(BRICK_WIDTH, BRICK_HEIGHT);
                brick.setFilled(true);
                brick.setColor(Color(i));
                add(brick, width, height);
                width += BRICK_WIDTH + BRICK_SEP;
            }
        }
    }

    private Color Color(int i) {
        if (i >= 0 && i < 2)
            return Color.RED;
        if (i >= 2 && i < 4)
            return Color.ORANGE;
        if (i >= 4 && i < 6)
            return Color.YELLOW;
        if (i >= 6 && i < 8)
            return Color.GREEN;
        else
            return Color.CYAN;
    }

    private boolean isItBrick(GObject collision) {
        if (collision != null) {
            if (collision.getWidth() == BRICK_WIDTH && collision.getHeight() == BRICK_HEIGHT) {
//                int o = r_gen.nextInt(0,10);
//                if (o == 0 || o == 5 || o == 10){
//
//                rect = new GImage("powerup.png");
//                rect.scale(0.04,0.04);
//                add(rect,collision.getX(),collision.getY());
//                remove(collision);
//                }
//                else {
                    remove(collision);
//                }
                countBricks++;
                vy *= (-1);
                return true;
            }
        }
        return false;
    }

    public boolean hitTheBrick() {
        if (ball != null) {
            GObject collision;
            collision = getElementAt(ball.getX() + BALL_RADIUS / 2, ball.getY());
            if (isItBrick(collision))
                return true;
            collision = getElementAt(ball.getX(), ball.getY());
            if (isItBrick(collision))
                return true;
            collision = getElementAt(ball.getX(), ball.getY() + BALL_RADIUS);
            if (isItBrick(collision))
                return true;
            collision = getElementAt(ball.getX() + BALL_RADIUS, ball.getY() + BALL_RADIUS);
            if (isItBrick(collision))
                return true;
            collision = getElementAt(ball.getX() + BALL_RADIUS, ball.getY());
            if (isItBrick(collision))
                return true;
            return false;
        }
        return true;
    }
//    public void movePowerUp(){
//        int y_SPEED = 3;
//        if (rect!=null){
//            if (rect.getY()+10<=APPLICATION_HEIGHT){
//                rect.move(0,y_SPEED);
//            }
//        }
//    }
    public void hitTheRocket() {
        if (ball!=null){
        GObject collision = getElementAt(ball.getX(), ball.getY() + PADDLE_HEIGHT);
        GObject collision1 = getElementAt(ball.getX() + BALL_RADIUS, ball.getY() + PADDLE_HEIGHT);
        if (collision == rocket) {
            vy *= (-1);
        } else if (collision1 == rocket) {
            vy *= (-1);
        }
    }
    }

    public void checkTheRocket() {
        if (ball!=null){
        if (ball.getY() + BALL_RADIUS > APPLICATION_HEIGHT - vy) {
            NTURNS -= 1;
            if (NTURNS == 0) {
                game = false;
                remove(ball);
            } else {
                remove(ball);
                int random = r_gen.nextInt(1, 3);
                vx = random;
//                add(ball, getWidth() / 2.0, getHeight() / 2.0);
            }
        }
    }

    }
    public void mouseClicked(MouseEvent e) {
        if (game && !menu){
        if (ball == null) {
            ball = new GOval(BALL_RADIUS, BALL_RADIUS);
            ball.setFilled(true);
            ball.setColor(Color.black);
            add(ball, getWidth() / 2.0, getHeight() / 2.0);
        }
    }
       if (menu){
            if (e.getX()>=playGame.getX() && e.getX()<=playGame.getX()+175 && e.getY()>=playGame.getY() && e.getY()<=playGame.getY()+100){
                menu = false;
                removeAll();
                game = true;
                NTURNS = 3;
            }
        }
    }
      public void mouseMoved(MouseEvent e) {
        if (!menu) {
            int x_SPEED = 8;
            while (e.getX() > rocket.getX() && rocket.getX() + PADDLE_WIDTH <= APPLICATION_WIDTH - 10) {
                rocket.move(x_SPEED, 0);
            }
            while (e.getX() < rocket.getX() && rocket.getX() >= 0) {
                rocket.move(-x_SPEED, 0);
            }
        }

    }
    private GRect playGame;
    private GLabel start;
    private GLabel beginning;
    private boolean game = true;
    private boolean menu = true;
    private RandomGenerator r_gen = RandomGenerator.getInstance();
}
