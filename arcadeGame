/*
 * File: Breakout.java
 * -------------------
 * Name:
 * Section Leader:
 *
 * This file will eventually implement the game of Breakout.
 */

import acm.graphics.*;
import acm.program.*;
import acm.util.*;

import java.applet.*;
import java.awt.*;
import java.awt.event.*;
import java.math.BigDecimal;

public class setup extends GraphicsProgram {
    //Hello
    /** Width and height of application window in pixels */
    public static final int APPLICATION_WIDTH = 400;
    public static final int APPLICATION_HEIGHT = 600;

    /** Dimensions of game board (usually the same) */
    private static final int WIDTH = APPLICATION_WIDTH;
    private static final int HEIGHT = APPLICATION_HEIGHT;

    /** Dimensions of the paddle */
    private static final int PADDLE_WIDTH = 60;
    private static final int PADDLE_HEIGHT = 10;

    /** Offset of the paddle up from the bottom */
    private static final int PADDLE_Y_OFFSET = 30;

    /** Number of bricks per row */
    private static final int NBRICKS_PER_ROW = 10;

    /** Number of rows of bricks */
    private static final int NBRICK_ROWS = 10;

    /** Separation between bricks */
    private static final int BRICK_SEP = 4;

    /** Width of a brick */
    private static final int BRICK_WIDTH =
            (WIDTH - (NBRICKS_PER_ROW - 1) * BRICK_SEP) / NBRICKS_PER_ROW;

    /** Height of a brick */
    private static final int BRICK_HEIGHT = 8;

    /** Radius of the ball in pixels */
    private static final int BALL_RADIUS = 10;
    private static final int PAUSE = 3;

    /** Offset of the top brick row from the top */
    private static final int BRICK_Y_OFFSET = 70;
    private int X_SPEED = 2;
    private int Y_SPEED = 1;
    /** Number of turns */
    private static final int NTURNS = 3;
    private GRect paddle;
    private GOval ball;
    /* Method: run() */
    /** Runs the Breakout program. */
    public void setupTheGame(){
        this.setSize(800,800);
        paddle = new GRect(PADDLE_WIDTH, PADDLE_HEIGHT);
        paddle.setFilled(true);
        paddle.setColor(Color.green);
        add(paddle,0,500);
        ball = new GOval(BALL_RADIUS, BALL_RADIUS);
        ball.setFilled(true);
        ball.setColor(Color.black);
        add(ball,(double) getWidth() / 2, (double) getHeight() / 2);
    }
    public void ballMove() {

            if (o==0){
            if (ball.getX() + BALL_RADIUS <= getWidth() && ball.getY()+BALL_RADIUS <=getHeight()) {
                ball.move(X_SPEED, Y_SPEED);
                if (ball.getX()+BALL_RADIUS >=getWidth()){
                o = 1;}
                if(ball.getY()+BALL_RADIUS>=getHeight()){
                    o = 3;
                }
            }
    }


            if (o == 1){
                if (ball.getY() + BALL_RADIUS <= getHeight() && ball.getX()>=0) {
                    ball.move(-X_SPEED, Y_SPEED);
                    if (ball.getY()+BALL_RADIUS >= getHeight()){
                    o = 2;}
                    if(ball.getX()<=0){
                        o = 0;
                    }
                }
            }
        if (o == 2){
            if (ball.getX()  >=0  && ball.getY()>=0) {
                ball.move(-X_SPEED, -Y_SPEED);
                if (ball.getX()<= 0){
                    o = 3;}
                if (ball.getY()<=0){
                    o = 1;
                }
            }
        }
        if (o == 3){
            if (ball.getY()>0 && ball.getX()+BALL_RADIUS<=getWidth()){
                ball.move(X_SPEED,-Y_SPEED);
            }
            if (ball.getX()+BALL_RADIUS >=getWidth()){
                o = 2;
            }
            if (ball.getY()<=0){
                o = 0;
            }
        }
    }
    public void hitThePaddle(){
        GObject collision = getElementAt(ball.getX(),ball.getY());
        if(collision == paddle){
            remove(ball);
            remove(paddle);
            game = false;
        }
    }
    public void paddleMove(MouseEvent e){
        paddle.move(e.getX(),0);
    }
    public void checkForWinner(){
        if (game == false){
            label = new GLabel("You win");
            label.setFont("Bahnshift-18");
            add(label,100,100);
        }
    }
    public void run() {
        setupTheGame();
        while(game){
        ballMove();
        hitThePaddle();
        checkForWinner();

        pause(PAUSE);
        }
        addMouseListeners();

    }
//    public void mouseMoved(MouseEvent e){
//        paddleMove(e);
//        pause(30);
//    }
    private boolean game = true;
    private static int o = 0;
    private GLabel label;
    private RandomGenerator r_gen = RandomGenerator.getInstance();
}
